// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Arknoah {
class Request_HeadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Request_Head> {
} _Request_Head_default_instance_;
class RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Request> {
} _Request_default_instance_;

namespace protobuf_protocol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Head, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Head, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Head, passwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Head, cmd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, head_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Request_Head)},
  { 8, -1, sizeof(Request)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_Head_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Request_Head_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Request_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Request_Head_default_instance_.DefaultConstruct();
  _Request_default_instance_.DefaultConstruct();
  _Request_default_instance_.get_mutable()->head_ = const_cast< ::Arknoah::Request_Head*>(
      ::Arknoah::Request_Head::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016protocol.proto\022\007Arknoah\"\304\001\n\007Request\022#\n"
      "\004head\030\001 \001(\0132\025.Arknoah.Request.Head\032\223\001\n\004H"
      "ead\022\013\n\003uid\030\001 \001(\r\022\016\n\006passwd\030\002 \001(\t\022*\n\003cmd\030"
      "\003 \001(\0162\035.Arknoah.Request.Head.CMDType\" \n\007"
      "CMDType\022\n\n\006SignUp\020\000\022\t\n\005LogIn\020\001\" \n\010Server"
      "ID\022\t\n\005Zoned\020\000\022\t\n\004Mask\020\200\036b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_protocol_2eproto

const ::google::protobuf::EnumDescriptor* Request_Head_CMDType_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[0];
}
bool Request_Head_CMDType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_Head_CMDType Request_Head::SignUp;
const Request_Head_CMDType Request_Head::LogIn;
const Request_Head_CMDType Request_Head::CMDType_MIN;
const Request_Head_CMDType Request_Head::CMDType_MAX;
const int Request_Head::CMDType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Request_Head_ServerID_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[1];
}
bool Request_Head_ServerID_IsValid(int value) {
  switch (value) {
    case 0:
    case 3840:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_Head_ServerID Request_Head::Zoned;
const Request_Head_ServerID Request_Head::Mask;
const Request_Head_ServerID Request_Head::ServerID_MIN;
const Request_Head_ServerID Request_Head::ServerID_MAX;
const int Request_Head::ServerID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_Head::kUidFieldNumber;
const int Request_Head::kPasswdFieldNumber;
const int Request_Head::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Head::Request_Head()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Arknoah.Request.Head)
}
Request_Head::Request_Head(const Request_Head& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.passwd().size() > 0) {
    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:Arknoah.Request.Head)
}

void Request_Head::SharedCtor() {
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(cmd_));
  _cached_size_ = 0;
}

Request_Head::~Request_Head() {
  // @@protoc_insertion_point(destructor:Arknoah.Request.Head)
  SharedDtor();
}

void Request_Head::SharedDtor() {
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request_Head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Head::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request_Head& Request_Head::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Request_Head* Request_Head::New(::google::protobuf::Arena* arena) const {
  Request_Head* n = new Request_Head;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Head::Clear() {
// @@protoc_insertion_point(message_clear_start:Arknoah.Request.Head)
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(cmd_));
}

bool Request_Head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Arknoah.Request.Head)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string passwd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwd().data(), static_cast<int>(this->passwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Arknoah.Request.Head.passwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Arknoah.Request.Head.CMDType cmd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd(static_cast< ::Arknoah::Request_Head_CMDType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Arknoah.Request.Head)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Arknoah.Request.Head)
  return false;
#undef DO_
}

void Request_Head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Arknoah.Request.Head)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), static_cast<int>(this->passwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Arknoah.Request.Head.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->passwd(), output);
  }

  // .Arknoah.Request.Head.CMDType cmd = 3;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cmd(), output);
  }

  // @@protoc_insertion_point(serialize_end:Arknoah.Request.Head)
}

::google::protobuf::uint8* Request_Head::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Arknoah.Request.Head)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), static_cast<int>(this->passwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Arknoah.Request.Head.passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  // .Arknoah.Request.Head.CMDType cmd = 3;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cmd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Arknoah.Request.Head)
  return target;
}

size_t Request_Head::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Arknoah.Request.Head)
  size_t total_size = 0;

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwd());
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // .Arknoah.Request.Head.CMDType cmd = 3;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Head::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Arknoah.Request.Head)
  GOOGLE_DCHECK_NE(&from, this);
  const Request_Head* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Head>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Arknoah.Request.Head)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Arknoah.Request.Head)
    MergeFrom(*source);
  }
}

void Request_Head::MergeFrom(const Request_Head& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Arknoah.Request.Head)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
}

void Request_Head::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Arknoah.Request.Head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Head::CopyFrom(const Request_Head& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Arknoah.Request.Head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Head::IsInitialized() const {
  return true;
}

void Request_Head::Swap(Request_Head* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Head::InternalSwap(Request_Head* other) {
  passwd_.Swap(&other->passwd_);
  std::swap(uid_, other->uid_);
  std::swap(cmd_, other->cmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Head::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_Head

// uint32 uid = 1;
void Request_Head::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 Request_Head::uid() const {
  // @@protoc_insertion_point(field_get:Arknoah.Request.Head.uid)
  return uid_;
}
void Request_Head::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:Arknoah.Request.Head.uid)
}

// string passwd = 2;
void Request_Head::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request_Head::passwd() const {
  // @@protoc_insertion_point(field_get:Arknoah.Request.Head.passwd)
  return passwd_.GetNoArena();
}
void Request_Head::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Arknoah.Request.Head.passwd)
}
#if LANG_CXX11
void Request_Head::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Arknoah.Request.Head.passwd)
}
#endif
void Request_Head::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Arknoah.Request.Head.passwd)
}
void Request_Head::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Arknoah.Request.Head.passwd)
}
::std::string* Request_Head::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:Arknoah.Request.Head.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request_Head::release_passwd() {
  // @@protoc_insertion_point(field_release:Arknoah.Request.Head.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Head::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:Arknoah.Request.Head.passwd)
}

// .Arknoah.Request.Head.CMDType cmd = 3;
void Request_Head::clear_cmd() {
  cmd_ = 0;
}
::Arknoah::Request_Head_CMDType Request_Head::cmd() const {
  // @@protoc_insertion_point(field_get:Arknoah.Request.Head.cmd)
  return static_cast< ::Arknoah::Request_Head_CMDType >(cmd_);
}
void Request_Head::set_cmd(::Arknoah::Request_Head_CMDType value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Arknoah.Request.Head.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Arknoah.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::Arknoah::Request_Head(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Arknoah.Request)
}

void Request::SharedCtor() {
  head_ = NULL;
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:Arknoah.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Arknoah.Request)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Arknoah.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Arknoah.Request.Head head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Arknoah.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Arknoah.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Arknoah.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Arknoah.Request.Head head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // @@protoc_insertion_point(serialize_end:Arknoah.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Arknoah.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Arknoah.Request.Head head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Arknoah.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Arknoah.Request)
  size_t total_size = 0;

  // .Arknoah.Request.Head head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Arknoah.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Arknoah.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Arknoah.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Arknoah.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::Arknoah::Request_Head::MergeFrom(from.head());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Arknoah.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Arknoah.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(head_, other->head_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// .Arknoah.Request.Head head = 1;
bool Request::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void Request::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::Arknoah::Request_Head& Request::head() const {
  // @@protoc_insertion_point(field_get:Arknoah.Request.head)
  return head_ != NULL ? *head_
                         : *::Arknoah::Request_Head::internal_default_instance();
}
::Arknoah::Request_Head* Request::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::Arknoah::Request_Head;
  }
  // @@protoc_insertion_point(field_mutable:Arknoah.Request.head)
  return head_;
}
::Arknoah::Request_Head* Request::release_head() {
  // @@protoc_insertion_point(field_release:Arknoah.Request.head)
  
  ::Arknoah::Request_Head* temp = head_;
  head_ = NULL;
  return temp;
}
void Request::set_allocated_head(::Arknoah::Request_Head* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Arknoah.Request.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Arknoah

// @@protoc_insertion_point(global_scope)
