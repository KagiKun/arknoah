// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace arknoah {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Request_head;
class Request_headDefaultTypeInternal;
extern Request_headDefaultTypeInternal _Request_head_default_instance_;
}  // namespace arknoah

namespace arknoah {

namespace protobuf_protocol_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_protocol_2eproto

enum Request_head_PackageType {
  Request_head_PackageType_SIGN_UP = 0,
  Request_head_PackageType_SIGN_IN = 1,
  Request_head_PackageType_INIT = 3,
  Request_head_PackageType_Request_head_PackageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Request_head_PackageType_Request_head_PackageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Request_head_PackageType_IsValid(int value);
const Request_head_PackageType Request_head_PackageType_PackageType_MIN = Request_head_PackageType_SIGN_UP;
const Request_head_PackageType Request_head_PackageType_PackageType_MAX = Request_head_PackageType_INIT;
const int Request_head_PackageType_PackageType_ARRAYSIZE = Request_head_PackageType_PackageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_head_PackageType_descriptor();
inline const ::std::string& Request_head_PackageType_Name(Request_head_PackageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_head_PackageType_descriptor(), value);
}
inline bool Request_head_PackageType_Parse(
    const ::std::string& name, Request_head_PackageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_head_PackageType>(
    Request_head_PackageType_descriptor(), name, value);
}
// ===================================================================

class Request_head : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arknoah.Request.head) */ {
 public:
  Request_head();
  virtual ~Request_head();

  Request_head(const Request_head& from);

  inline Request_head& operator=(const Request_head& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_head& default_instance();

  static inline const Request_head* internal_default_instance() {
    return reinterpret_cast<const Request_head*>(
               &_Request_head_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Request_head* other);

  // implements Message ----------------------------------------------

  inline Request_head* New() const PROTOBUF_FINAL { return New(NULL); }

  Request_head* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request_head& from);
  void MergeFrom(const Request_head& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request_head* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Request_head_PackageType PackageType;
  static const PackageType SIGN_UP =
    Request_head_PackageType_SIGN_UP;
  static const PackageType SIGN_IN =
    Request_head_PackageType_SIGN_IN;
  static const PackageType INIT =
    Request_head_PackageType_INIT;
  static inline bool PackageType_IsValid(int value) {
    return Request_head_PackageType_IsValid(value);
  }
  static const PackageType PackageType_MIN =
    Request_head_PackageType_PackageType_MIN;
  static const PackageType PackageType_MAX =
    Request_head_PackageType_PackageType_MAX;
  static const int PackageType_ARRAYSIZE =
    Request_head_PackageType_PackageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PackageType_descriptor() {
    return Request_head_PackageType_descriptor();
  }
  static inline const ::std::string& PackageType_Name(PackageType value) {
    return Request_head_PackageType_Name(value);
  }
  static inline bool PackageType_Parse(const ::std::string& name,
      PackageType* value) {
    return Request_head_PackageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string passwd = 2;
  void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // .arknoah.Request.head.PackageType cmd = 3;
  void clear_cmd();
  static const int kCmdFieldNumber = 3;
  ::arknoah::Request_head_PackageType cmd() const;
  void set_cmd(::arknoah::Request_head_PackageType value);

  // @@protoc_insertion_point(class_scope:arknoah.Request.head)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::uint32 uid_;
  int cmd_;
  mutable int _cached_size_;
  friend struct protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:arknoah.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Request_head head;

  // accessors -------------------------------------------------------

  // .arknoah.Request.head proto_head = 1;
  bool has_proto_head() const;
  void clear_proto_head();
  static const int kProtoHeadFieldNumber = 1;
  const ::arknoah::Request_head& proto_head() const;
  ::arknoah::Request_head* mutable_proto_head();
  ::arknoah::Request_head* release_proto_head();
  void set_allocated_proto_head(::arknoah::Request_head* proto_head);

  // @@protoc_insertion_point(class_scope:arknoah.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::arknoah::Request_head* proto_head_;
  mutable int _cached_size_;
  friend struct protobuf_protocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_head

// uint32 uid = 1;
inline void Request_head::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 Request_head::uid() const {
  // @@protoc_insertion_point(field_get:arknoah.Request.head.uid)
  return uid_;
}
inline void Request_head::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:arknoah.Request.head.uid)
}

// string passwd = 2;
inline void Request_head::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request_head::passwd() const {
  // @@protoc_insertion_point(field_get:arknoah.Request.head.passwd)
  return passwd_.GetNoArena();
}
inline void Request_head::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:arknoah.Request.head.passwd)
}
#if LANG_CXX11
inline void Request_head::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arknoah.Request.head.passwd)
}
#endif
inline void Request_head::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arknoah.Request.head.passwd)
}
inline void Request_head::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arknoah.Request.head.passwd)
}
inline ::std::string* Request_head::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:arknoah.Request.head.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request_head::release_passwd() {
  // @@protoc_insertion_point(field_release:arknoah.Request.head.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_head::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:arknoah.Request.head.passwd)
}

// .arknoah.Request.head.PackageType cmd = 3;
inline void Request_head::clear_cmd() {
  cmd_ = 0;
}
inline ::arknoah::Request_head_PackageType Request_head::cmd() const {
  // @@protoc_insertion_point(field_get:arknoah.Request.head.cmd)
  return static_cast< ::arknoah::Request_head_PackageType >(cmd_);
}
inline void Request_head::set_cmd(::arknoah::Request_head_PackageType value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:arknoah.Request.head.cmd)
}

// -------------------------------------------------------------------

// Request

// .arknoah.Request.head proto_head = 1;
inline bool Request::has_proto_head() const {
  return this != internal_default_instance() && proto_head_ != NULL;
}
inline void Request::clear_proto_head() {
  if (GetArenaNoVirtual() == NULL && proto_head_ != NULL) delete proto_head_;
  proto_head_ = NULL;
}
inline const ::arknoah::Request_head& Request::proto_head() const {
  // @@protoc_insertion_point(field_get:arknoah.Request.proto_head)
  return proto_head_ != NULL ? *proto_head_
                         : *::arknoah::Request_head::internal_default_instance();
}
inline ::arknoah::Request_head* Request::mutable_proto_head() {
  
  if (proto_head_ == NULL) {
    proto_head_ = new ::arknoah::Request_head;
  }
  // @@protoc_insertion_point(field_mutable:arknoah.Request.proto_head)
  return proto_head_;
}
inline ::arknoah::Request_head* Request::release_proto_head() {
  // @@protoc_insertion_point(field_release:arknoah.Request.proto_head)
  
  ::arknoah::Request_head* temp = proto_head_;
  proto_head_ = NULL;
  return temp;
}
inline void Request::set_allocated_proto_head(::arknoah::Request_head* proto_head) {
  delete proto_head_;
  proto_head_ = proto_head;
  if (proto_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:arknoah.Request.proto_head)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace arknoah

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::arknoah::Request_head_PackageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arknoah::Request_head_PackageType>() {
  return ::arknoah::Request_head_PackageType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
