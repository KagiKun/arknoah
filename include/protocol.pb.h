// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Arknoah {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Request_Head;
class Request_HeadDefaultTypeInternal;
extern Request_HeadDefaultTypeInternal _Request_Head_default_instance_;
}  // namespace Arknoah

namespace Arknoah {

namespace protobuf_protocol_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_protocol_2eproto

enum Request_Head_CMDType {
  Request_Head_CMDType_SignUp = 0,
  Request_Head_CMDType_LogIn = 1,
  Request_Head_CMDType_Request_Head_CMDType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Request_Head_CMDType_Request_Head_CMDType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Request_Head_CMDType_IsValid(int value);
const Request_Head_CMDType Request_Head_CMDType_CMDType_MIN = Request_Head_CMDType_SignUp;
const Request_Head_CMDType Request_Head_CMDType_CMDType_MAX = Request_Head_CMDType_LogIn;
const int Request_Head_CMDType_CMDType_ARRAYSIZE = Request_Head_CMDType_CMDType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Head_CMDType_descriptor();
inline const ::std::string& Request_Head_CMDType_Name(Request_Head_CMDType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Head_CMDType_descriptor(), value);
}
inline bool Request_Head_CMDType_Parse(
    const ::std::string& name, Request_Head_CMDType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Head_CMDType>(
    Request_Head_CMDType_descriptor(), name, value);
}
enum Request_Head_ServerID {
  Request_Head_ServerID_Zoned = 0,
  Request_Head_ServerID_Mask = 3840,
  Request_Head_ServerID_Request_Head_ServerID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Request_Head_ServerID_Request_Head_ServerID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Request_Head_ServerID_IsValid(int value);
const Request_Head_ServerID Request_Head_ServerID_ServerID_MIN = Request_Head_ServerID_Zoned;
const Request_Head_ServerID Request_Head_ServerID_ServerID_MAX = Request_Head_ServerID_Mask;
const int Request_Head_ServerID_ServerID_ARRAYSIZE = Request_Head_ServerID_ServerID_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Head_ServerID_descriptor();
inline const ::std::string& Request_Head_ServerID_Name(Request_Head_ServerID value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Head_ServerID_descriptor(), value);
}
inline bool Request_Head_ServerID_Parse(
    const ::std::string& name, Request_Head_ServerID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Head_ServerID>(
    Request_Head_ServerID_descriptor(), name, value);
}
// ===================================================================

class Request_Head : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Arknoah.Request.Head) */ {
 public:
  Request_Head();
  virtual ~Request_Head();

  Request_Head(const Request_Head& from);

  inline Request_Head& operator=(const Request_Head& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_Head& default_instance();

  static inline const Request_Head* internal_default_instance() {
    return reinterpret_cast<const Request_Head*>(
               &_Request_Head_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Request_Head* other);

  // implements Message ----------------------------------------------

  inline Request_Head* New() const PROTOBUF_FINAL { return New(NULL); }

  Request_Head* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request_Head& from);
  void MergeFrom(const Request_Head& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request_Head* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Request_Head_CMDType CMDType;
  static const CMDType SignUp =
    Request_Head_CMDType_SignUp;
  static const CMDType LogIn =
    Request_Head_CMDType_LogIn;
  static inline bool CMDType_IsValid(int value) {
    return Request_Head_CMDType_IsValid(value);
  }
  static const CMDType CMDType_MIN =
    Request_Head_CMDType_CMDType_MIN;
  static const CMDType CMDType_MAX =
    Request_Head_CMDType_CMDType_MAX;
  static const int CMDType_ARRAYSIZE =
    Request_Head_CMDType_CMDType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMDType_descriptor() {
    return Request_Head_CMDType_descriptor();
  }
  static inline const ::std::string& CMDType_Name(CMDType value) {
    return Request_Head_CMDType_Name(value);
  }
  static inline bool CMDType_Parse(const ::std::string& name,
      CMDType* value) {
    return Request_Head_CMDType_Parse(name, value);
  }

  typedef Request_Head_ServerID ServerID;
  static const ServerID Zoned =
    Request_Head_ServerID_Zoned;
  static const ServerID Mask =
    Request_Head_ServerID_Mask;
  static inline bool ServerID_IsValid(int value) {
    return Request_Head_ServerID_IsValid(value);
  }
  static const ServerID ServerID_MIN =
    Request_Head_ServerID_ServerID_MIN;
  static const ServerID ServerID_MAX =
    Request_Head_ServerID_ServerID_MAX;
  static const int ServerID_ARRAYSIZE =
    Request_Head_ServerID_ServerID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServerID_descriptor() {
    return Request_Head_ServerID_descriptor();
  }
  static inline const ::std::string& ServerID_Name(ServerID value) {
    return Request_Head_ServerID_Name(value);
  }
  static inline bool ServerID_Parse(const ::std::string& name,
      ServerID* value) {
    return Request_Head_ServerID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string passwd = 2;
  void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // .Arknoah.Request.Head.CMDType cmd = 3;
  void clear_cmd();
  static const int kCmdFieldNumber = 3;
  ::Arknoah::Request_Head_CMDType cmd() const;
  void set_cmd(::Arknoah::Request_Head_CMDType value);

  // @@protoc_insertion_point(class_scope:Arknoah.Request.Head)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::uint32 uid_;
  int cmd_;
  mutable int _cached_size_;
  friend struct protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Arknoah.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Request_Head Head;

  // accessors -------------------------------------------------------

  // .Arknoah.Request.Head head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::Arknoah::Request_Head& head() const;
  ::Arknoah::Request_Head* mutable_head();
  ::Arknoah::Request_Head* release_head();
  void set_allocated_head(::Arknoah::Request_Head* head);

  // @@protoc_insertion_point(class_scope:Arknoah.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Arknoah::Request_Head* head_;
  mutable int _cached_size_;
  friend struct protobuf_protocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_Head

// uint32 uid = 1;
inline void Request_Head::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 Request_Head::uid() const {
  // @@protoc_insertion_point(field_get:Arknoah.Request.Head.uid)
  return uid_;
}
inline void Request_Head::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:Arknoah.Request.Head.uid)
}

// string passwd = 2;
inline void Request_Head::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request_Head::passwd() const {
  // @@protoc_insertion_point(field_get:Arknoah.Request.Head.passwd)
  return passwd_.GetNoArena();
}
inline void Request_Head::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Arknoah.Request.Head.passwd)
}
#if LANG_CXX11
inline void Request_Head::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Arknoah.Request.Head.passwd)
}
#endif
inline void Request_Head::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Arknoah.Request.Head.passwd)
}
inline void Request_Head::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Arknoah.Request.Head.passwd)
}
inline ::std::string* Request_Head::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:Arknoah.Request.Head.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request_Head::release_passwd() {
  // @@protoc_insertion_point(field_release:Arknoah.Request.Head.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Head::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:Arknoah.Request.Head.passwd)
}

// .Arknoah.Request.Head.CMDType cmd = 3;
inline void Request_Head::clear_cmd() {
  cmd_ = 0;
}
inline ::Arknoah::Request_Head_CMDType Request_Head::cmd() const {
  // @@protoc_insertion_point(field_get:Arknoah.Request.Head.cmd)
  return static_cast< ::Arknoah::Request_Head_CMDType >(cmd_);
}
inline void Request_Head::set_cmd(::Arknoah::Request_Head_CMDType value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Arknoah.Request.Head.cmd)
}

// -------------------------------------------------------------------

// Request

// .Arknoah.Request.Head head = 1;
inline bool Request::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void Request::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::Arknoah::Request_Head& Request::head() const {
  // @@protoc_insertion_point(field_get:Arknoah.Request.head)
  return head_ != NULL ? *head_
                         : *::Arknoah::Request_Head::internal_default_instance();
}
inline ::Arknoah::Request_Head* Request::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::Arknoah::Request_Head;
  }
  // @@protoc_insertion_point(field_mutable:Arknoah.Request.head)
  return head_;
}
inline ::Arknoah::Request_Head* Request::release_head() {
  // @@protoc_insertion_point(field_release:Arknoah.Request.head)
  
  ::Arknoah::Request_Head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Request::set_allocated_head(::Arknoah::Request_Head* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Arknoah.Request.head)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Arknoah

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Arknoah::Request_Head_CMDType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Arknoah::Request_Head_CMDType>() {
  return ::Arknoah::Request_Head_CMDType_descriptor();
}
template <> struct is_proto_enum< ::Arknoah::Request_Head_ServerID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Arknoah::Request_Head_ServerID>() {
  return ::Arknoah::Request_Head_ServerID_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
