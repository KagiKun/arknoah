// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Arknoah {

  /// <summary>Holder for reflection information generated from protocol.proto</summary>
  public static partial class ProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wcm90b2NvbC5wcm90bxIHYXJrbm9haCK9AQoHUmVxdWVzdBIpCgpwcm90",
            "b19oZWFkGAEgASgLMhUuYXJrbm9haC5SZXF1ZXN0LmhlYWQahgEKBGhlYWQS",
            "CwoDdWlkGAEgASgNEg4KBnBhc3N3ZBgCIAEoCRIuCgNjbWQYAyABKA4yIS5h",
            "cmtub2FoLlJlcXVlc3QuaGVhZC5QYWNrYWdlVHlwZSIxCgtQYWNrYWdlVHlw",
            "ZRILCgdTSUdOX1VQEAASCwoHU0lHTl9JThABEggKBElOSVQQA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Arknoah.Request), global::Arknoah.Request.Parser, new[]{ "ProtoHead" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Arknoah.Request.Types.head), global::Arknoah.Request.Types.head.Parser, new[]{ "Uid", "Passwd", "Cmd" }, null, new[]{ typeof(global::Arknoah.Request.Types.head.Types.PackageType) }, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Arknoah.ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      ProtoHead = other.protoHead_ != null ? other.ProtoHead.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "proto_head" field.</summary>
    public const int ProtoHeadFieldNumber = 1;
    private global::Arknoah.Request.Types.head protoHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Arknoah.Request.Types.head ProtoHead {
      get { return protoHead_; }
      set {
        protoHead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProtoHead, other.ProtoHead)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (protoHead_ != null) hash ^= ProtoHead.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (protoHead_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProtoHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (protoHead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProtoHead);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.protoHead_ != null) {
        if (protoHead_ == null) {
          protoHead_ = new global::Arknoah.Request.Types.head();
        }
        ProtoHead.MergeFrom(other.ProtoHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (protoHead_ == null) {
              protoHead_ = new global::Arknoah.Request.Types.head();
            }
            input.ReadMessage(protoHead_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Request message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class head : pb::IMessage<head> {
        private static readonly pb::MessageParser<head> _parser = new pb::MessageParser<head>(() => new head());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<head> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Arknoah.Request.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public head() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public head(head other) : this() {
          uid_ = other.uid_;
          passwd_ = other.passwd_;
          cmd_ = other.cmd_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public head Clone() {
          return new head(this);
        }

        /// <summary>Field number for the "uid" field.</summary>
        public const int UidFieldNumber = 1;
        private uint uid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Uid {
          get { return uid_; }
          set {
            uid_ = value;
          }
        }

        /// <summary>Field number for the "passwd" field.</summary>
        public const int PasswdFieldNumber = 2;
        private string passwd_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Passwd {
          get { return passwd_; }
          set {
            passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "cmd" field.</summary>
        public const int CmdFieldNumber = 3;
        private global::Arknoah.Request.Types.head.Types.PackageType cmd_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Arknoah.Request.Types.head.Types.PackageType Cmd {
          get { return cmd_; }
          set {
            cmd_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as head);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(head other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Uid != other.Uid) return false;
          if (Passwd != other.Passwd) return false;
          if (Cmd != other.Cmd) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Uid != 0) hash ^= Uid.GetHashCode();
          if (Passwd.Length != 0) hash ^= Passwd.GetHashCode();
          if (Cmd != 0) hash ^= Cmd.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Uid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Uid);
          }
          if (Passwd.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Passwd);
          }
          if (Cmd != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Cmd);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Uid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
          }
          if (Passwd.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
          }
          if (Cmd != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cmd);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(head other) {
          if (other == null) {
            return;
          }
          if (other.Uid != 0) {
            Uid = other.Uid;
          }
          if (other.Passwd.Length != 0) {
            Passwd = other.Passwd;
          }
          if (other.Cmd != 0) {
            Cmd = other.Cmd;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Uid = input.ReadUInt32();
                break;
              }
              case 18: {
                Passwd = input.ReadString();
                break;
              }
              case 24: {
                cmd_ = (global::Arknoah.Request.Types.head.Types.PackageType) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the head message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum PackageType {
            [pbr::OriginalName("SIGN_UP")] SignUp = 0,
            [pbr::OriginalName("SIGN_IN")] SignIn = 1,
            [pbr::OriginalName("INIT")] Init = 3,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
