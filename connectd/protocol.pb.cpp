// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace arknoah {
class Request_headDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Request_head> {
} _Request_head_default_instance_;
class RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Request> {
} _Request_default_instance_;

namespace protobuf_protocol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_head, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_head, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_head, passwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_head, cmd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, proto_head_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Request_head)},
  { 8, -1, sizeof(Request)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_head_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Request_head_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Request_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Request_head_default_instance_.DefaultConstruct();
  _Request_default_instance_.DefaultConstruct();
  _Request_default_instance_.get_mutable()->proto_head_ = const_cast< ::arknoah::Request_head*>(
      ::arknoah::Request_head::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016protocol.proto\022\007arknoah\"\275\001\n\007Request\022)\n"
      "\nproto_head\030\001 \001(\0132\025.arknoah.Request.head"
      "\032\206\001\n\004head\022\013\n\003uid\030\001 \001(\r\022\016\n\006passwd\030\002 \001(\t\022."
      "\n\003cmd\030\003 \001(\0162!.arknoah.Request.head.Packa"
      "geType\"1\n\013PackageType\022\013\n\007SIGN_UP\020\000\022\013\n\007SI"
      "GN_IN\020\001\022\010\n\004INIT\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_protocol_2eproto

const ::google::protobuf::EnumDescriptor* Request_head_PackageType_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[0];
}
bool Request_head_PackageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_head_PackageType Request_head::SIGN_UP;
const Request_head_PackageType Request_head::SIGN_IN;
const Request_head_PackageType Request_head::INIT;
const Request_head_PackageType Request_head::PackageType_MIN;
const Request_head_PackageType Request_head::PackageType_MAX;
const int Request_head::PackageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_head::kUidFieldNumber;
const int Request_head::kPasswdFieldNumber;
const int Request_head::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_head::Request_head()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:arknoah.Request.head)
}
Request_head::Request_head(const Request_head& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.passwd().size() > 0) {
    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:arknoah.Request.head)
}

void Request_head::SharedCtor() {
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(cmd_));
  _cached_size_ = 0;
}

Request_head::~Request_head() {
  // @@protoc_insertion_point(destructor:arknoah.Request.head)
  SharedDtor();
}

void Request_head::SharedDtor() {
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request_head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_head::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request_head& Request_head::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Request_head* Request_head::New(::google::protobuf::Arena* arena) const {
  Request_head* n = new Request_head;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_head::Clear() {
// @@protoc_insertion_point(message_clear_start:arknoah.Request.head)
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(cmd_));
}

bool Request_head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:arknoah.Request.head)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string passwd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwd().data(), static_cast<int>(this->passwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "arknoah.Request.head.passwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .arknoah.Request.head.PackageType cmd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd(static_cast< ::arknoah::Request_head_PackageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:arknoah.Request.head)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:arknoah.Request.head)
  return false;
#undef DO_
}

void Request_head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:arknoah.Request.head)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), static_cast<int>(this->passwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "arknoah.Request.head.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->passwd(), output);
  }

  // .arknoah.Request.head.PackageType cmd = 3;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cmd(), output);
  }

  // @@protoc_insertion_point(serialize_end:arknoah.Request.head)
}

::google::protobuf::uint8* Request_head::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:arknoah.Request.head)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), static_cast<int>(this->passwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "arknoah.Request.head.passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  // .arknoah.Request.head.PackageType cmd = 3;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cmd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:arknoah.Request.head)
  return target;
}

size_t Request_head::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arknoah.Request.head)
  size_t total_size = 0;

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwd());
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // .arknoah.Request.head.PackageType cmd = 3;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_head::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arknoah.Request.head)
  GOOGLE_DCHECK_NE(&from, this);
  const Request_head* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_head>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arknoah.Request.head)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arknoah.Request.head)
    MergeFrom(*source);
  }
}

void Request_head::MergeFrom(const Request_head& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arknoah.Request.head)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
}

void Request_head::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arknoah.Request.head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_head::CopyFrom(const Request_head& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arknoah.Request.head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_head::IsInitialized() const {
  return true;
}

void Request_head::Swap(Request_head* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_head::InternalSwap(Request_head* other) {
  passwd_.Swap(&other->passwd_);
  std::swap(uid_, other->uid_);
  std::swap(cmd_, other->cmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_head::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_head

// uint32 uid = 1;
void Request_head::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 Request_head::uid() const {
  // @@protoc_insertion_point(field_get:arknoah.Request.head.uid)
  return uid_;
}
void Request_head::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:arknoah.Request.head.uid)
}

// string passwd = 2;
void Request_head::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request_head::passwd() const {
  // @@protoc_insertion_point(field_get:arknoah.Request.head.passwd)
  return passwd_.GetNoArena();
}
void Request_head::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:arknoah.Request.head.passwd)
}
#if LANG_CXX11
void Request_head::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arknoah.Request.head.passwd)
}
#endif
void Request_head::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arknoah.Request.head.passwd)
}
void Request_head::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arknoah.Request.head.passwd)
}
::std::string* Request_head::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:arknoah.Request.head.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request_head::release_passwd() {
  // @@protoc_insertion_point(field_release:arknoah.Request.head.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_head::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:arknoah.Request.head.passwd)
}

// .arknoah.Request.head.PackageType cmd = 3;
void Request_head::clear_cmd() {
  cmd_ = 0;
}
::arknoah::Request_head_PackageType Request_head::cmd() const {
  // @@protoc_insertion_point(field_get:arknoah.Request.head.cmd)
  return static_cast< ::arknoah::Request_head_PackageType >(cmd_);
}
void Request_head::set_cmd(::arknoah::Request_head_PackageType value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:arknoah.Request.head.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kProtoHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:arknoah.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_proto_head()) {
    proto_head_ = new ::arknoah::Request_head(*from.proto_head_);
  } else {
    proto_head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:arknoah.Request)
}

void Request::SharedCtor() {
  proto_head_ = NULL;
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:arknoah.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != internal_default_instance()) {
    delete proto_head_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:arknoah.Request)
  if (GetArenaNoVirtual() == NULL && proto_head_ != NULL) {
    delete proto_head_;
  }
  proto_head_ = NULL;
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:arknoah.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .arknoah.Request.head proto_head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proto_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:arknoah.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:arknoah.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:arknoah.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arknoah.Request.head proto_head = 1;
  if (this->has_proto_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->proto_head_, output);
  }

  // @@protoc_insertion_point(serialize_end:arknoah.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:arknoah.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arknoah.Request.head proto_head = 1;
  if (this->has_proto_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->proto_head_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:arknoah.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arknoah.Request)
  size_t total_size = 0;

  // .arknoah.Request.head proto_head = 1;
  if (this->has_proto_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->proto_head_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arknoah.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arknoah.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arknoah.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arknoah.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_proto_head()) {
    mutable_proto_head()->::arknoah::Request_head::MergeFrom(from.proto_head());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arknoah.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arknoah.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(proto_head_, other->proto_head_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// .arknoah.Request.head proto_head = 1;
bool Request::has_proto_head() const {
  return this != internal_default_instance() && proto_head_ != NULL;
}
void Request::clear_proto_head() {
  if (GetArenaNoVirtual() == NULL && proto_head_ != NULL) delete proto_head_;
  proto_head_ = NULL;
}
const ::arknoah::Request_head& Request::proto_head() const {
  // @@protoc_insertion_point(field_get:arknoah.Request.proto_head)
  return proto_head_ != NULL ? *proto_head_
                         : *::arknoah::Request_head::internal_default_instance();
}
::arknoah::Request_head* Request::mutable_proto_head() {
  
  if (proto_head_ == NULL) {
    proto_head_ = new ::arknoah::Request_head;
  }
  // @@protoc_insertion_point(field_mutable:arknoah.Request.proto_head)
  return proto_head_;
}
::arknoah::Request_head* Request::release_proto_head() {
  // @@protoc_insertion_point(field_release:arknoah.Request.proto_head)
  
  ::arknoah::Request_head* temp = proto_head_;
  proto_head_ = NULL;
  return temp;
}
void Request::set_allocated_proto_head(::arknoah::Request_head* proto_head) {
  delete proto_head_;
  proto_head_ = proto_head;
  if (proto_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:arknoah.Request.proto_head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace arknoah

// @@protoc_insertion_point(global_scope)
